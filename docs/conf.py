# -*- coding: utf-8 -*-
#
# tuna documentation build configuration file, created by
# sphinx-quickstart on Sun May  7 19:17:53 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import logging
import sys
# sys.path.insert(0, os.path.abspath('.'))

logger = logging.getLogger(__name__)

DOC_SOURCES_DIR = os.path.dirname(os.path.abspath(__file__))
logger.info("Documentation folder: {}".format(DOC_SOURCES_DIR))
PROJECT_ROOT_DIR = os.path.dirname(DOC_SOURCES_DIR)
logger.info("Project folder: {}".format(PROJECT_ROOT_DIR))

# insert
sys.path.insert(0, DOC_SOURCES_DIR)

# this is quite dirty approach but we're not working at NASA and nobody can die
# because of that. Am I right?
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'
if on_rtd:

    render_examples = False

    # hack for lacking git-lfs support on rtd
    import git_lfs
    try:
        from urllib.error import HTTPError
    except ImportError:
        from urllib2 import HTTPError

    _fetch_urls = git_lfs.fetch_urls

    def _patched_fetch_urls(lfs_url, oid_list):
        """Hack git_lfs library that sometimes makes too big requests"""
        objects = []

        try:
            objects.extend(_fetch_urls(lfs_url, oid_list))
        except HTTPError as err:
            if err.code != 413:
                raise
            logger.error("LFS: request entity too large, splitting in half")
            objects.extend(_patched_fetch_urls(lfs_url, oid_list[:len(oid_list) // 2]))
            objects.extend(_patched_fetch_urls(lfs_url, oid_list[len(oid_list) // 2:]))

        return objects

    git_lfs.fetch_urls = _patched_fetch_urls
    git_lfs.fetch(PROJECT_ROOT_DIR)

else:
    render_examples = True


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
    'sphinx.ext.mathjax',
    'sphinx.ext.napoleon']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'tunacell'
copyright = u'2017-2019, Joachim Rambeau'
author = u'Joachim Rambeau'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
try:
    from tunacell import __version__
    # The short X.Y version.
    version = '.'.join(__version__.split('.')[:2])
    # The full version, including alpha/beta/rc tags.
    release = __version__
except ImportError:
    version = release = 'dev'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

import sphinx_rtd_theme
html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]


# html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'tunadoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'tunacell.tex', u'tunacell Documentation',
     u'Joachim Rambeau', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'tunacell', u'tunacell Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'tunacell', u'tunacell Documentation',
     author, 'tunacell', 'One line description of project.',
     'Miscellaneous'),
]



